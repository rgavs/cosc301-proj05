au:rgavs & work together
TODO:
!! Create node struct; then *array* of nodes (IFF the clusters can be mapped to a fixed size)
    #define CLUST_ORPHAN = -1;
    struct _node{
        int stat;                       // or together fat.h cluster numbers ; initially set to CLUST_ORPHAN
        uint16_t next_clust;            // if in cluster chain, points to next cluster; else -1
        uint16_t parent;                //                      points to HEAD of cluster chain; else -1
    }; typedef struct _node node;
    **array will function much better than linked list as it can be randomly accessed unlike linked list
    initialize full array, node for each cluster; initially set as CLUST_o = -1
        pointer to next node sequentially
        array of pointers to cluster # that node points to (array size 0 if !directory) : initialize all to NULL
    update clusters as touched below

Cycle through all files in all directories
    Follow all cluster chains
        ensure all clusters are marked free or are referenced in a cluster chain
            and are not marked BAD
                what to do here ??
        add up size in bytes (adding the likely partially filled cluster EOF)
        compare each of those to size shown in direntry
            size may be > or < ; both are problems
                if > : free clusters over length denoted in metadata
Loop through array of clusters and pick out problems: unreferenced | BAD | beyond file length
    Upon finding any issues- print out files with inconsistent metadata/actual size


HOW TO:
    read cluster contents with is_valid_cluster | get_fat_entry
    use linked list struct as defined above

Broad issues:
    Need to think about/decide plans for implementation
        how many helper functions to create etc ???
    Can struct holding cluster references be a fixed size (number of sectors) ??
